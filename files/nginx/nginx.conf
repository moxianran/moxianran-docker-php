user www-data;
pid /run/nginx.pid;

# 指定Nginx启动的工作进程的数量
worker_processes 2;
# 开启利用多核cpu
# 01表示启用第一个CPU内核，10表示启用第二个CPU内核，开启了四个进程，它们分别对应着开启2个CPU内核
worker_cpu_affinity 01 10;
# nginx工作进程最大打开文件数
worker_rlimit_nofile 51200;

events {
    # 设置单个工作进程最大连接数10240
    worker_connections 10240;
    # 如果关闭，可能会引起惊群问题。网站访问量比较大时，可以开启
    accept_mutex on;
    # 打开同时接受多个新网络连接请求的功能。
    multi_accept on;
    # 使用epoll事件驱动，因为epoll的性能相比其他事件驱动要好很多。IO效率提高(空间换时间),不需要轮询
    use epoll;
}

http {
	include /etc/nginx/mime.types;
	default_type application/octet-stream;
	charset UTF-8;

    # 启动高效传输文件的模式：不经过缓冲区
    sendfile on;
    # Nginx工作进程每次调用sendfile()传输的数据最大不能超出这个值，默认值为0表示无限制，可以设置在http/server/location模块中。
    sendfile_max_chunk 512k;
    # 当包累计到一定大小就进行传送，与sendfile搭配使用
    tcp_nopush on;
    # 禁用了Nagle算法，数据包立即发送出去。仅在将连接转变为长连接的时候才被启用
    tcp_nodelay on;
    # 隐藏ngxin版本号 off为隐藏
    server_tokens off;
    # 会话保持时间
    keepalive_timeout 10;

    # 发送给客户端应答后的超时时间
    send_timeout 10;
    # 不使用内部重定向
    server_name_in_redirect off;
    # 服务器名字的hash表大小
    server_names_hash_bucket_size 64;
    # 影响散列表的冲突率:越大，就会消耗更多的内存，但散列key的冲突率会降低，检索速度就更快。越小，消耗的内存就越小，但散列key的冲突率可能上升。
    types_hash_max_size 2048;
    # 用于设置客户端请求读取超时时间，如果超过这个时间，客户端没有发送任何数据，nginx将返回“request time out (408)”错误。
	client_header_timeout 10;
	# 用于指定来自客户端请求头headerbuffer大小，对于大多数请求，1KB的缓冲区大小已经足够，如果自定义了消息头或有更大的cookie，可以增加缓冲区大小。
	client_header_buffer_size 32k;
	# 用来指定客户端请求中较大的消息头的缓存最大数量和大小，“4”为个数，“128”为大小，最大缓存为4个128KB。
	large_client_header_buffers 4 128k;
	# 允许客户端请求的最大单文件字节数
	client_max_body_size 10m;
	# 指定客户端与服务端建立连接后发送 request body 的超时时间。如果客户端在指定时间内没有发送任何内容，Nginx 返回 HTTP 408（Request Timed Out）
	client_body_timeout 10;
	# 缓冲区代理缓冲用户端请求的最大字节数
	client_body_buffer_size 256k;
	# 在客户端停止响应之后,允许服务器关闭连接,释放socket关联的内存
	reset_timedout_connection on;


    # log setting 日志格式
    log_format main  '$remote_addr - $remote_user [$time_local] "$request" '
             '$status $body_bytes_sent "$http_referer" '
             '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    # access_log off;
    error_log /var/log/nginx/error.log warn;


    # FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。
    # 指定本地需要用多少和多大的缓冲区来缓冲fastCGI的应答
	fastcgi_buffers 4 128k;
	# 指定读取fastCGI应答第一部分需要用多大的缓冲区，一般第一部分应答不会超过1k，一般设置为64k
	fastcgi_buffer_size 128k;
	# 指定连接到后端fastCGI的超时时间
	fastcgi_connect_timeout 3s;
	# 向fastCGI请求的超时时间，这个值是指已经完成两次握手后向fastCGI传送的超时时间
	fastcgi_send_timeout 120s;
	# 接收fastCGI应答的超时时间，这个值已经完成两次握手后接收fastCGI应答的超时时间
	fastcgi_read_timeout 120s;
	# 默认值是fastcgi_buffers的两倍
	fastcgi_busy_buffers_size 256k;
	# 在写入fastcgi_temp_path是用多大的数据块，默认值是fastcgi_buffers两倍
	fastcgi_temp_file_write_size 256k;
	# 隐藏头
	fastcgi_hide_header X-Powered-By;


    # 开启gzip压缩输出
    gzip off;
    # ie6以下不尽兴压缩
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    # 无条件启用压缩
    gzip_proxied any;
    # 用于设置允许压缩的页面最小字节数，页面字节数从header头的content-length中获取，默认值是0，
    # 不管页面多大都进行压缩，建议设置成大于1k的字节数，小于1k可能会越压越大最小压缩文件大小
    gzip_min_length 1000;
    # 压缩等级
    gzip_comp_level 6;
    # 表示申请4个单位为16k的内存作为压缩结果流缓存，默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果
    gzip_buffers 16 8k;
    # 压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_http_version 1.1;
    # 压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    # 选项可让前端的缓存服务器缓存经过gzip压缩的页面，例如，用squid缓存经过nginx压缩的数据。
    gzip_vary on;
    # 检查预压缩文件
    #gunzip_static on;


    # 影响静态文件更新时间
    # max指定缓存数量   inactive是指经过多长时间文件没被请求后删除缓存。
	open_file_cache max=10000 inactive=20s;
    # 指多长时间检查一次缓存的有效信息
	open_file_cache_valid 30s;
	# NGINX将在非活动时间段之后从高速缓存中清除元素。 此指令可用于配置最小访问次数以将元素标记为活动使用。
	open_file_cache_min_uses 2;
	# 是否显示错误
	open_file_cache_errors on;

    include /etc/nginx/conf.d/*.conf;
}